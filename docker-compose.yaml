services:

  postgres:
    image: 'postgres:16.2@sha256:6b841c8f6a819884207402f1209a8116844365df15fca8cf556fc54a24c70800'
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tomorrow
    volumes:
      - "${PWD}/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql"
      - "pgdata:/var/lib/postgresql/data"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 1s
      timeout: 20s
      retries: 20

  tomorrow:
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app/tomorrow # Set the working directory
    command: poetry run python __main__.py # Run the scrapers
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: tomorrow
    volumes:
      - "${PWD}/blobs:/tmp/blobs"
      - "${PWD}/tomorrow/logs:/app/tomorrow/logs"
      - type: bind
        source: ./.env
        target: /app/.env
        read_only: true
    depends_on:
      postgres:
        condition: service_healthy

  pytest:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "sh", "-c", "pytest --verbose --maxfail=1 > /app/logs/test_results.log 2>&1" ]
    volumes:
      - "${PWD}/logs:/app/logs"
    working_dir: /app
    depends_on:
      - postgres

  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    command: jupyter notebook --ip 0.0.0.0 --NotebookApp.token='' --NotebookApp.password='' --allow-root
    ports:
      - "8888:8888"
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: tomorrow
    volumes:
      - "${PWD}/analysis.ipynb:/app/analysis.ipynb"
    depends_on:
      postgres:
        condition: service_healthy

  cron:
    build:
      context: .
      dockerfile: cron.Dockerfile
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGDATABASE=tomorrow
    volumes:
      - "${PWD}/cronjobs:/app/cronjobs"
      - "${PWD}/logs:/app/logs"
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  pgdata:
